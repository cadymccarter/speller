// Implements a dictionary's functionality
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <strings.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include "dictionary.h"

// Represents a node in a hash table
typedef struct node
{
    char word[LENGTH + 1];
    struct node *next;
}
node;
//initalizing two global node variables
node *root = NULL;
node *previous = NULL;

// Number of buckets in hash table
const unsigned int N = 26;

// Hash table
node *table[N];


// Returns true if word is in dictionary else false
bool check(const char *word)
{


    int index = hash(copy);
    node *n = table[index];

    node *cursor = n;

    while (n != NULL)
    {
        //if word is the same return true
        if(strcasecmp(word, n -> word) == 0)
        {
            return true;
        }

        //move on to next word in linked list
        cursor -> next = n;
        n = cursor;

    }
    return false;
}

// Hashes word to a number
unsigned int hash(const char *word)
{
    return tolower(word[0]) - 'a';

}
//initalize word_count
int word_count = 0;

// Loads dictionary into memory, returning true if successful else false
bool load(const char *dictionary)
{
    FILE *dict = fopen("dictionary.c", "r");
    if (dict == NULL)
    {
    return false;
    }
    //declare word variable
    char word[LENGTH + 1];

    while(fscanf(dict, "%s", word) != EOF)
    {
        node *current = malloc(sizeof(node));

        if(current == NULL)
        {

            return false;
        }

        //copy word from dict to new node
        strcpy(current -> word, word);

        //create index for new word using hash function
        int dict_index = hash(word);


        //if dict_index is null insert word at that index
        if(table[dict_index] == NULL)
        {
            table[dict_index]= current;
            current -> next = NULL;
            word_count++;

        }
        //if dict_index is taken append new node

        else
        {

            current -> next = table[dict_index];
            table[dict_index]= current;
            word_count++;

        }


    }
    fclose(dict);
    return true;
}

// Returns number of words in dictionary if loaded else 0 if not yet loaded
unsigned int size(void)
{
    return word_count;
    return 0;
}

// Unloads dictionary from memory, returning true if successful else false
bool unload(void)
{
    for(int i = 0; i < 26; i++)
    {
        //create pointer to first list
        node *cursor = table[i];

        while(cursor != NULL)
        {
            node *temp = cursor;
            cursor = cursor -> next;
            free(temp);
        }
    }

    return true;
}
